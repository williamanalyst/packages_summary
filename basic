# Basic functions in Python (default packages)
#

#######################################################################################
# os package
import os
os.chdir()
os.getcwd() # get the current working directory


#######################################################################################
# list
list1 = ['a', 'b', 'c', 1, 2, 3]
list2 = ['c', 'd', 'e', 2, 4, 6]
list3 = list1 + list2
#
count = 0
for i in list1:
    if i in list2:
        count += 1
print(count)
#
print(len(setA.intersection(SetB)) # returns the elements that exist in both Sets
#
#######################################################################################
# convert binary to int
int1 = int('1011', 2) # convert binary value into int
binary1 = bin(4) # convert an int into a string with "0b" at the beginning and the binary value following
#
format(14, 'b') # format an int as binary value
#
#######################################################################################
# Reverse String
str1 = 'this'
str2 = str1[::-1] # str2 = 'siht' (in which case the list was reversed)


#######################################################################################
# index in list/ string
string1 = 'This is a test string.'
index1 = string1.index('test')


#######################################################################################
# Basic math calculation
13 // 5 # == 2
13 % 5 # == 3


#######################################################################################
# List comprehension
df['col1'] = ['result1' if i in list1
    'result2' if i in list2
    'result3' if i in list3
    'result4' for i in base_list]

# check whether an item exist in a list
'Example' in list([1, 2, 'String', 'Example'])




#
#######################################################################################
# Annotation
def func1(x, y) -> int: # the "->" here is just an annotation/ comment
    return int(x + y)
func(1.5, 2.1)

#######################################################################################
# Check package version
sklearn.__version__ # return the version of the package


#

