#
sns.set(color_codes = True)
sns.set_style('whitegrid')
#
###################################################################################################
# line chart
plt.figure(figsize = (15, 6)
#
plt.plot(array1, array2, linewidth = 0.7, color = 'red', linestyle = '--', alpha = 0.5, label = 'This line chart is about...') 
#
# vertical line
ax.axvline(x = df['col1'].median(), color = 'm', linestyle = '--', linewidth = 2, label = 'Median') # 

#
###################################################################################################
# scatterplot
#
plt.scatter(df['col1'], df['col2'], s = 50, color = 'red', alpha = 0.5)
#
#
#
plt.show()
#
#
sns.scatterplot(data = df, x = 'value_col1', y = 'value_col2', hue = 'category_col')
#
###################################################################################################
# histogram
#
plt.hist(x = df['column1'], bins = [i/ 10 - 1 for i in range (20)], color = 'red', alpha = 0.5) #
#
df['col1'].plot.hist()
df['col1'].hist()
#
###################################################################################################
# distplot
#
sns.distplot(df['col2'], hist = False, rug = True, kde_kws = {'shade': True}, bins = 20, color = 'g')

#
###################################################################################################
# barplot
plt.bar(df['column1'], height = df['column2'], width = 0.25, alpha = 0.5, color = 'red', label = '')
#
# add text label on the chart
plt.text(x, y, 'text to be plotted', fontsize = 12, color = 'grey', ha = 'right', 'va' = 'bottom', alpha = 0.7) #
#
plt.xticks(np.arange(len(df['column1'])), df[column1], rotation = 90) # set label for each category, especially when the labels are string
#
plt.xlabel('')
plt.ylabel('')
plt.title('')
#
plt.legend()
plt.show()
#
sns.barplot(data = df, x = 'col1', y = 'col2', hue = 'col3') # 
sns.barplot(data = df, x = 'col1', y = 'col2', row = 'col3') # 
#
###################################################################################################
fig, ax = plt.subplots(figsize = (15, 6))
p1 = ax.bar(list1, list2, width = 0.25, label = '', color = '')
#
ax2 = ax1.twinx() # set-up twin axis for the y axis (using same x-axis)
p2 = ax2.plot(list3, list4, label = '')
#
sns.distplot(df['col1'], ax = ax2) # use "ax = " to specify the axis of the subplot
ax2.set(xlabel = 'Label Name', ylabel = 'Label Name', xlim = ([a, b]), title = 'Title')
#
#
ax.set_xlabel('', fontsize = 14)
ax.set_ylabel('', fontsize = 16) # 
ax.text(x, y, 'This is a note on the chart at a given location...')
#
plt.xlim([x1, x2])
ax.set_ylim([a, b])
ax2.set_ylim([c, d]) # set ylim for the 2nd axis
#
ax.legend(loc = 'upper left', fontsize = 14)
ax2.legend(loc = 'upper right') # ax2.legend( loc = [0.9, 0.8])
plt.title('')
#
###################################################################################################
# heatmap 
p3 = sns.heatmap(df, annot = True, linewidth = 0.05, fmt = ',.0f', annot_kws = {'size': 8}, square = False, cmap = 'YlGnBu', cbar = False) # fmt = 'd' for integers
#
sns.heatmap(df.corr()) # the correlation matrix visualisation


#
###################################################################################################
# Regression plot
sns.regplot(x = 'col1', y = 'col2', data = df, marker = '+', x_bins = 4, fit_reg = False) # 
sns.regplot(x = 'col1', y = 'col2', data = df, marker = '+', order = 2) # changed into polynomial regression with an order of 2 
sns.regplot(x = 'col_category', y = 'col2', data = df, marker = '+', x_jitter = 0.1,  order = 2) # also works for categorical variable
sns.regplot(x = 'col_category', y = 'col2', data = df, marker = '+', x_estimator = np.mean, order = 2) # also works for categorical variable
#
sns.lmplot(x = 'col1', y = 'col2', data = df, hue = 'col3' ) # 
sns.lmplot(x = 'col1', y = 'col2', data = df, row = 'col3' ) # create multiple columns on the same x-axis
sns.lmplot(x = 'col1', y = 'col2', data = df, hue = 'col3', col = 'col4')
#
# residplot
sns.residplot(data = df, x = 'col1', y = 'col2') # residual plot
sns.residplot(data = df, x = 'col1', y = 'col2', order = 2) # residual plot
#
###################################################################################################
# boxplot
sns.boxplot(data = df, x = 'col1', y = 'col2', palette = 'husl', hue = 'col3')
#
###################################################################################################
# countplot
sns.countplot(data = df, y = 'col2', palette = 'husl', hue = 'col3')
#
###################################################################################################
# pointplot
sns.pointplot(data = df, x = 'col1', y = 'col2', palette = 'husl', capsize = 0.1)
#
###################################################################################################
# FacetGrid
g = sns.FacetGrid(df, col = 'col1')
g.map(sns.boxplot, 'Col2', prder = ['1', '2', '3', '4'])
#
g = sns.FacetGrid(df, col = 'col1')
g.map(plt.scatter, 'col2', 'col3')
#
# factorplot() # factorplot is a shortcut for creating FacetGrid()
sns.factorplot(data =df, x = 'col1', col = 'col2', kind = 'box')
#
sns.lmplot(data = df, x = 'col1', y = 'col2', row = 'col3', col = 'col4')
sns.lmplot(data = df, x = 'col1', y = 'col2', col = 'col3', fig_reg = False) # use fig_reg to control regression line
#
###################################################################################################
# use different color palettes
for palette in sns.palettes.SEABORN_PALETTES:
    sns.set_palette(palette)
    sns.displot(df['col']) # 
# display the color palettes
for p in sns.palettes.SEABORN_PALETTES:
    sns.set_palette(p)
    sns.palplot(sns.color_palette())
    plt.show()
#
sns.palplot(sns.color_palette('Paired', 12)) # 
sns.palplot(sns.color_palette('Blues', 12)) # 'Purples', 'husl', 'coolwarm'
sns.palplot(sns.color_palette('BrBG', 12))

#
sns.violinplot(data = df, x = 'col1', y = 'col2')
sns.lvplot(data = df, x = 'col1', y = 'col2') # similar to violin plot, easier to interpret, quicker to run
#
###################################################################################################
# create multiple subplots
fig, (ax0, ax1) = plt.subplots(nrows = 1, ncols = 2, sharey = True)
#
sns.distplot(df['col1'], ax = ax0)
sns.distplot(df['col2'], ax = ax1)
#
plt.show()


#
###################################################################################################
# remove axis from the chart
#

# remove the right spine
sns.despine() 

# clear the plot (end up showing black image)
plt.clf()
