# UNION (union has 1 more step, a sort, therefore could be cost-expsensive compared to union all) / UNION ALL
-- UNION removes the duplicates in the 2 tables, whereas UNION ALL keeps all the records
#####################################################################################################
# Drop duplicates from table



# TOP (5)/ TOP 5 PERCENT
SELECT TOP 25 PERCENT FROM table (select the 1st quantile)
-- 
# EXISTS/ NOT EXIST or IN/ NOT IN (results are identical, efficiency )
-- EXISTS will stop searching the subquery when the condition is TRUE
-- IN will collect all results from the subquery before passing to the outer query
SELECT 
col1
, col2
FROM table1 AS t1 
WHERE EXISTS (
SELECT 1	
FROM table2 AS t2
WHERE t1.col1 = t2.col1)
--
WHERE col1
IN (SELECT col1 FROM table2)
-- NOT IN (SELECT col1 FROM table2 WHERE col1 IS NOT NULL) -- Need to filter out NULL value when using NOT IN
--
#####################################################################################################
# format selected columns
SELECT FORMAT([numeric_col], 'P') FROM table1 -- convert numeric into percentage

# WITH ROLLUP (works with hierarchical data)
-- comes after GROUP BY 

# WITH CUBE (works with non-hierarchical data)
-- creates a cross-aggregation of all combinations (could therefore result in huge number of rows)

# GROUPING SETS (allows user to define specific aggregation levels)
GROUP BY GROUPING SETS
(
(col_not_aggregated1, col_not_aggregated2) -- 
(col_to_aggregate1) -- 
(col_to_aggregate2) 
() -- remains blank to give grand total
)
-- 

#####################################################################################################
# ABS() function
ABS(column_name1 - column_name2) 
-- return the absolute value of a variable or calculation

# SIGN() function
SIGN(column1 - column2) 
-- return -1, 0, +1 to represent whether the result is positive or negative

# AVG(), SUM(), COUNT(), STDEV(), STDEVP(), VAR(), POWER(@variable, 2), SQUARE(), SQRT() functions
-- the input must be float 

# CEILING(), FLOOR(), ROUND(@variable, 2) function
SELECT CEILING(-50.49) -- returns -50
SELECT FLOOR(15.47) -- returns 15 (integer)

# LEAD(column_name1) OVER (ORDER BY column_name2) function
SELECT LEAD(column_name1) OVER (ORDER BY column2) AS column_next_row
SELECT LAG(column_name, 2) OVER (ORDER BY column3) AS column_prior_row
-- 

# OVER (PARTITION BY) function - split the results into different partitions
SELECT FIRST_VALUE(column_name) OVER (PARTITION BY column_name1 ORDER BY column_name2)
--
SELECT AVG([Col1]) OVER (ORDER BY [Col2] ROWS BETWEEN 30 PRECEDING AND 30 FOLLOWING) AS [Rolling_Average_60] 
FROM [dbo].[Table1]
--
SELECT AVG(column_name) OVER (
PARTITION BY column_name2
ORDER BY column_name3
ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)
FROM ... --
--

# ROW_NUMBER(), RANK(), DENSE_RANK() (ranking functions)
-- 
ROW_NUMBER() -- generate unique, ascending integer value starting from 1
RANK() -- create ascending integer value starting from 1, can have ties, can skip numbers
DENSE_RANK() OVER (ORDER BY [Col1] DESC) AS [Rank] -- can have ties, whereas does not skip numbers

# CAST() function
CAST(column_content AS date) AS new_column_name

# PARSE() function

# LEN() function
SELECT LEN(column1) AS len_of_string_in_a_column
-- returns the length of the string

#
#####################################################################################################
# indexes (typically done by a DBA)
-- structure to improve speed of accessing data from a table
-- used to locate data quickly without having to scan the entire table
-- useful for improving performance of queries with filter conditions
-- applied to table columns
# clustered (analogy: dictionary) indexes
-- table data pages are ordered by the columns with the index
-- only 1 allowed per table
# non-clustered (analogy: text book with an index at the back) index
-- a table can contain more than 1 non-clustered index

# CHARINDEX() function
SELECT CHARINDEX('string to find', 'The whole sentence or column', [start index of in the whole sentence that you want to search])
SELECT CHARINDEX('apple', 'There are 2 apples on the apple tree', 20) -- returns the index of the 2nd apple

# PATINDEX() funtion 
-- deals with pattern, similar to regular expression
SELECT PATINDEX('%pattern%', expression, [location])
-- % = match any string of any length
-- _ = match a single character
-- [] = match on any character in the [] bracket, e.g. [abc] means match with either a or b or c
-- Example: PATINDEX('%chocolate%', column1) PATINDEX('%ch_c%', column1)

# LOWER() and UPPER() function

# LEFT() and RIGHT() function
SELECT LEFT(column1, 3) FROM table1 

# LTRIM() and RTRIM() function
-- removes the leading blanks in the string

# REPLACE() function
SELECT REPLACE('This is a sample stirng to replace', 'replace', 'be replaced.') AS replace_example

# SUBSTRING() function
SELECT SUBSTRING('1234567', 5, 3) -- returns '567'

# STRING_AGG() function
SELECT STRING_AGG(column_name, ',') AS new_column_name FROM table_name
SELECT STRING_AGG(column_name, ',') WITHIN GROUP (ORDER BY column_name) AS new_column_name
-- create a string (similar to a list, whereas not a list) e.g. new_string = 'item1, item2, item3, ..., itemn'

# STRING_SPLIT(@variable, ',') function
SELECT value FROM STRING_SPLIT(@variable, ' ')

# Get the current datetime from SQL Server
SELECT GETDATE() 
-- return current datetime

#####################################################################################################
# Declare variables in SQL Server
DECLARE @currentdatetime AS datetime
DECLARE @var_int INT = 5 -- can either directly set the variable value or use SET @var = __ later
-- set datatype (can be either single value or table) when declare variable
SET @currentdatetime = GETDATE()
-- assign value to variable
SELECT @currentdatetime

#####################################################################################################
# DATEADD function
SELECT DATEADD(day, 1, '2020-11-12') -- can use day/week/month,etc.
SELECT DATEADD(d, -1, GETDATE()) -- retrieve yesterday's datetime
SELECT CAST(DATEADD(d, -1, GETDATE())) AS yesterday -- retrieve yesterday's date (not including hour)
-- choose unit of days, number of units and the starting date
SELECT DATEADD(month, DATEDIFF(month, 0, GETDATE()), 0) -- get the date of the first day in the current month

# DATEDIFF function
SELECT DATEDIFF(day, '2020-11-12', '2012-12-24')

# DATEPART() function
DATEPART(week, column_name)
 
# SWITCHOFFSET function
SELECT
SWITCHOFFSET(@var, '-03:00') AS new_colume

# TODATETIMEOFFSET function
SELECT
TODATETIMEOFFSET(@datetime, '-07:00') AS new_col 
-- nominate new timezone, for datetime object without timezone

# DATENAME function
SELECT 
DATENAME(month, @datevar) AS month_name;
-- month, weekday, etc.

# ISDATE() function
SELECT
ISDATE(@datevar1) AS valid_date;
-- return 1 if @datevar = date, time, datetime, return 0 if datetime2 or other non-datetime format

# SET DATEFORMAT function
SET DATEFORMAT {dmy} -- can also use SET LANGUAGE {Engligh/ French} (which implies datet format)
-- valid formats include: mdy, dmy, ymd, ydm, myd, dym
SELECT ISDATE(@datevar2) AS evaluate_valid;

# TRY_CONVERT funtion
SELECT
TRY_CONVERT(datetime2(3), @var) AS new_col

# Extract Year/ Month/ Day elements from Timestamp
SELECT
  YEAR([Timestamp]) AS [Year]
, MONTH([Timestamp]) AS [Month]
, DAY([Timestamp]) AS [Day]
FROM table

#####################################################################################################
# obtain the interesction between 2 columns/ sets
SELECT col1 FROM table1
INTERSECT/ EXCEPT -- 
SELECT col2 FROM tbale2

#####################################################################################################
# CAST function
WHERE CAST([date_string] AS date) = DATEADD(d, -1, GETDATE())
-- date that match yesterday

# TRY_PARSE function
SELECT
TRY_PARSE(@var AS date USING 'fr-fr')
--

# user-defined function (reduce execution time/ network traffic, allow modular programming)
CREATE FUNCTION udf(@var1 date, @var2 numeric)
    RETURNS numeric AS -- set data type that will be returned
BEGIN -- begin function
RETURN (
SELECT SUM(DATEDIFF(second, [col1], [col2]))/ 3600 
FROM [dbname].[dbo].[tbname]
WHERE CONVERT(date, [date1]) = @var1
AND [col3] = @var2
) -- actual function
END; -- end function
-- 

# execute user-defined function
EXEC @variablename = dbo.FunctionName @param = ''
SELECT
    '',
    @variablename

#####################################################################################################
# alter function
ALTER FUNCTION FunctionName (@VariableName AS datetime = '1/01/2017')
-- CREATE OR ALTER FUNCTION FunctionName (@VariableName AS datetime = '1/01/2017')
RETURN TABLE AS RETURN
SELECT
    colname1 as col1
    , measurement2 as col2
    , measurement3 as col3
FROM tablename
WHERE CAST(colname4 AS date) = @VariableName
GROUP BY colname1

# drop function
DROP FUNCTION dbo.FunctionName

#####################################################################################################
# stored procedures (reduce execution time, network traffic, allow modular programming, improve security)
-- input --> actions (EXECUTE/ SELECT/ INSERT/ UPDATE/ DELETE) --> return (success/ failure) --> return output
-- 
CREATE PROCEDURE dbo.UniqueProcedureName(
    @var1 date,
    @var2 numeric(18, 0),
    @var3 numeric OUTPUT ) -- can be any data type (except table), can have multiple outputs per stored procedure
-- output parameters should not be used to communicate errors
AS 
-- SET NOCOUNT ON
BEGIN
INSERT INTO dbo.TableName() -- UPDATE dbo.TableName SET ColName = @var1
VALUES (@var1, @var2)
--
-- RETURN -- return values can only return integer data types, only 1 return value is allowed
END;

#
BEGIN TRY
END TRY
--
BEGIN CATCH
END CATCH
#
EXEC Procedure_Name
#
SELECT * FROM sys.procedures -- check procedures stored in SQL Server
#
#####################################################################################################
# Transactions 
BEGIN { TRAN | TRANSACTION }
    [ { transaction_name | @tran_name_variable } 
    [ WITH MARK ['description'] ]
    ]
[ ; ]
-- Example:
BEGIN TRY
    BEGIN TRAN;
UPDATE accounts SET account_balance = current_balance - 100 WHERE account_id = 1;
INSERT INTO transactions VALUES(1, -100, GETDATE());
--
UPDATE accounts SET account_balance = currentbalance + 100 WHERE account_id = 5;
INSERT INTO transactions VALUES(5, +100, GETDATE());
    COMMIT TRAN;
END TRY
--
BEGIN CATCH
    ROLLBACK TRAN;
END CATCH
--

#####################################################################################################
# triggers in SQL (Data Manipulatio: INSERT/UPDATE/DELETE, Data Definition: CREATE/ALTER/DROP, Logon: LOGON events)
-- DML Trigger: events associated with DML, such as INSERT, UPDATE, DELETE (ACCEPT AFTER/ INSTEAD OF, attached to tables/ views, has special tables, inserted/ deleted)
-- DDL Trigger: events associated with DDL, such as CREATE, ALTER, DROP (ONLY accept AFTER, attached to Database/ Server, no special tables)
# trigger is a SQL Server Object
-- AFTER trigger (FOR AND AFTER has the same result)
-- INSTEAD OF trigger (prevent from execution)
CREATE TRIGGER trigger_name
ON [prod_table] -- link to a table
AFTER INSERT -- or INSTEAD OF INSERT (INSTEAD OF an action)
AS -- the beginning of the trigger workflow
INSERT INTO table1 (col1, col2)
SELECT col1, col2
FROM deleted -- the automatically created table that collects deleted rows
PRINT('');
-- DML triggers use 2 special tables, 'inserted' and 'deleted' (automatically created by SQL Server)
-- when a new row is inserted, it is automatically stored in 'inserted' table, and not in the 'deleted' table
-- when multiple rows are updated, new rows will be included in 'inserted' table, and updated rows will be stored in 'deleted' table
-- when a row is deleted, it will not be stored in 'inserted' table, but it will be stored in 'deleted' table
--
CREATE TRIGGER PreventDropTable
ON DATABASE
FOR DROP_TABLE
AS
RAISEERROR('You are not allowed to remove tables from this database.', 16, 1)
ROLLBACK;
--
DROP TRIGGER trigger_name -- delete certain trigger by its trigger_name
ON DATABASE -- At database level
-- ON ALL SERVER
-- Disabling Trigger
DISABLE TRIGGER trigger_name
-- ENABLE TRIGGER trigger_name
ON table_name; -- if disabling a table-level trigger
--
ALTER TRIGGER trigger_name
ON table_name
AS
	PRINT 'You are not allowed to perform this action.'
#####################################################################################################
# recursion/ recursive query
WITH cte1 AS (
  SELECT 
    1 AS column_count,
    1 AS column_factorial
  UNION ALL
  SELECT
    column_count + 1
    , column_factorial * (column_count + 1)
  FROM cte1
  WHERE column_count < 10)
SELECT column_factorial
FROM cte1
#
WITH time_series AS 
    (SELECT
GETDATE() AS date
    UNION ALL
    SELECT
DATEADD(day, 1, date)
    FROM time_series
    WHERE date < GETDATE() + 364)
SELECT date
FROM time_series
OPTION(MAXRECURSION 365)


#####################################################################################################
# system error message
SELECT TOP(10) * FROM sys.messages -- shows message id, message content, severity level, etc.
-- (level: error 0-10 are informational messages, 11-16 are errors that can be corrected by the user, such as constraint violation, 
    -- 17-24 are other errors such as software problems)
-- (state: 1 if SQL Server displays error, 0-25 to rasie own errors)
-- (line: indicates in which line did the error occur)

# raise own error
BEGIN TRY
    IF NOT EXIST (SELECT * FROM table1 WHERE id = 11)
RAISEERROR('Insert your own error message here', ) -- RAISEERROR generate a new error and cannot access details of original error
	-- statement forllowing raiseerror can still be executed
END TRY
--
BEGIN CATCH
    SELECT 'This is just an error message.';
END CATCH
-- Microsoft recommend THROW command over RAISERROR function
-- THROW [error_number, message, state][;] -- statement following THROW will not be executed
BEGIN TRY
    SELECT number/ 0 FROM data;
END TRY
BEGIN CATCH
    THROW; -- as the "THROW" command is before the next select, the next select is not executed
    -- THROW 52000, 'This is an example for throw', 1 ; -- the  ";" must be added
    SELECT 'This line is executed' AS message;
END CATCH

# check datatype of a column
USE [dbname]
SELECT data_type
FROM information_schema.columns
WHERE table_name = ''
    AND column_name = ''
-- returns data type

# SQL formatting
-- Use UPPER CASE for all SQL syntax 
-- create a new line for each Major processing syntax such as SELECT, FROM, WHERE
-- indent for sub-queries, ON, AND/OR conditions
-- avoid long single lines of code such as multiple column names
-- complete the query with simi-colon (;)
-- alias with AS
-- use commenting blocks /* you can insert multiple lines here  */ for multiple lines or -- for single line

# SQL Processing Order
-- FROM > ( ON > JOIN ) > WHERE > ( GROUP BY > HAVING ) > SELECT > ( DISTINCT ) > ORDER > ( TOP )
-- 
-- HAVING (use for already grouped results)
--

# SSMS shortcut
-- Ctrl + K & Ctrl + C (make a line to be a comment)
-- Ctrl + K & Ctrl + U (make a line to be a command)
-- Ctrl + E (execute only sections selected)

# schema
.[dbo].[table_name] -- [dbo] = 'Database Owner', which is the defaule schema created in every database
-- .dbo is the default schema, and each user in a database could have a different schema
	
# view
CREATE OR REPLACE VIEW [view_name1] AS 
SELECT col1, col2
FROM table1
-- DROP VIEW [view_name1]
-- In SQL, a view is a virtual table based on the result-set of an SQL statement.
	-- A view always show up-to-date data (because every time a user query a view, the database engine recreates that view with SQL statement)

-- A view contains rows and columns, just like a real table, the fields in a view are fields from one or mode real tables in the database

# CPU time: time taken by sql server processor to process the query
# Elapsed time: total duration to run the query
SET STATISTICS TIME ON
SET STATISTICS TIME OFF
--
SET STATISTICS IO ON -- shows the 
SET STATISTICS IO OFF
	
