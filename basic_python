# Basic functions in Python (default packages)
#######################################################################################
import builtins
dir(builtins) # return the built-in functions in Python
#
# pip install Scrapy --user admin
#
#######################################################################################
# Check package version
import sklearn
print(sklearn.__version__)
#
#######################################################################################
# os package
import os
os.chdir() 
os.getcwd() # get the current working directory (similar as %pwd command, which also returns the current working directory)
#
# open files
with open('file1.html', 'r') as file1_read:
    content = file1_read.read()
    print(content)

#######################################################################################
# Python Datatypes:
#######################################################################################
# Numeric:
    # int
    # float
# String:
    #
# Boolean: 
    #
# List:
# Tuple:
# Dictionary:
    #
#######################################################################################
# List:
list1 = ['a', 'b', 'c', 1, 2, 3]
list2 = ['c', 'd', 'e', 2, 4, 6]
# 
list1.append(6) # add another element to the end of a list
list1[1] = 'd' # assign value to an element of a list (replace exisitng value)
list3 = list1 + list2
list1.remove('a') # directly remove 1 element from the list, and does not create a new list
list1.sort(reverse = True) # can only be either all numeric or all string elements
# 
del list1[2] # remove an element from a list based on the index of that element
#
if 'a' in list1: # check whether the element is in a list
    print('Element is in the list')
#
count = 0
for i in list1:
    if i in list2:
        count += 1
print(count)
#
print(len(setA.intersection(SetB)) # returns the elements that exist in both Sets
#

#######################################################################################
# tuple
tuple1 = (0, 1, 4, 2)
print(tuple1[2]) # we could retrieve elements within a tuple by its index


#######################################################################################
# convert binary to int
int1 = int('1011', 2) # convert binary value into int
binary1 = bin(4) # convert an int into a string with "0b" at the beginning and the binary value following
#
format(14, 'b') # format an int as binary value
#
#######################################################################################
# Reverse String
str1 = 'this'
str2 = str1[::-1] # str2 = 'siht' (in which case the list was reversed)


#######################################################################################
# index in list/ string
string1 = 'This is a test string.'
index1 = string1.index('test') # returns an error if the index() function cannot find an exact match


#######################################################################################
# Basic math calculation
13 // 5 # == 2
13 % 5 # == 3
#
a, b = divmod(9, 3) # returns the quotient and remainder
print(a, b)


#######################################################################################
# List comprehension
df['col1'] = ['result1' if i in list1
    'result2' if i in list2
    'result3' if i in list3
    'result4' for i in base_list]

# check whether an item exist in a list
'Example' in list([1, 2, 'String', 'Example'])

#
#
#######################################################################################
# Sets
set1.intersection(set2) # return elements in both set1 and set2
set1.difference(set2) # 
#
set1 == set2 # the sequence does not matter
set1 - set2 # return elements in set1 whereas not in set2

#
#######################################################################################
# Annotation
def func1(x, y) -> int: # the "->" here is just an annotation/ comment
    return int(x + y)
func(1.5, 2.1)

#######################################################################################
# Check package version
sklearn.__version__ # return the version of the package


#
#######################################################################################
# Dictionary (key-value pair)
dict1 = {'key1': [1, 2, 3], 'key2': 'name', 'key3': 155}
del dict1['key2'] # remove both key-value pair (both) from the dictionary
#
len(dict1) == 3 # get the length of a dictionary
str(dict1) # convert the dictionary into a string
#
print(dict1.keys()) # get all the key values from the dictionary as a list
print(dict1.values()) # get all the vlaues from the dictionary as a list


#######################################################################################
# Functions:
#######################################################################################
# Functions:
    # Built-in Functions:
        # len()
    # User-defined Functions:
        #
        def multiply(x, y):
            result = x * y
            return(result)    
            #
        x = int(input('Please insert the 1st number: ')) # directly return an error if the datatype is not as expected
        y = int(input('Please insert the 2nd number: '))
        #
        print('The result of the function = ', multiply(x, y))
            
    # Recusion Functions:
        # 
# Function Arguments:
    # Required Argument:
        # Number of arguments passed must be the same as expected.
        # The arguments must be in the same sequence.
    # Default Argument:
        # Similar to required arguments, whereas with default values.
        # Takes from 0 to n arguments:
        # Accept default arguments when value/input/variable not provided.
            def udf(var1 = 0, var2 = 0):
                result = var1 + var2
                return result
            udf(10, 20)
    # Keyword Argument:
        # Parameter names are used in the function call.
        # The keys are mapped into the arguments.
        # The position of the arguments does not matter.
            def myudf(name, age):
                print('Name = ', name)
                print('Age = ', age)
                return 
            #
            myudf(age = 10, name = 'John') # the variable names are used as keys here so that the order of the variable does not matter.
#######################################################################################
# Variables:
#######################################################################################
# Variables:
    # Global Variable:
    # Local Variable: 


#######################################################################################
# Packages and Modules:
#######################################################################################
# 
pip install tensorflow
pip install keras

pip install word2vec
pip install tfidf
pip install glove
pip install collections

pip install nltk
pip install gensim

pip install re
pip install itertools
pip install wordcloud

pip install xgboost
pip install tqdm # 








